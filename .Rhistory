)
# 2. Run Dynare and import the log
rbc_results <- run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
library(DynareR)
# Y‐shock IRF
include_IRF(
model = "rbc_model",
path  = "code/rbc_model/graphs",
IRF   = "Y"
)
# Y‐shock IRF
include_IRF(
model = "rbc_model",
path  = "code/rbc_model/graphs",
IRF   = "Y"
)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf.
# These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
# Lets load in example data, and see how this can be stored and later called from your 'data' folder.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
library(DynareR)
dynareCodes='%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RBC model with Labor and Log Utility
% Based on image equations (10)–(17)
% Corrected for B&K conditions (loglinear TFP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
var C               // Consumption
I               // Investment
Y               // Output
K               // Capital stock
R               // Return on Capital
W               // Wage
H               // Hours worked
A;              // Productivity level
varexo eps;         // TFP shock
parameters beta alpha delta rho chi;
beta  = 0.99;       // Discount factor
alpha = 0.33;       // Capital share
delta = 0.025;      // Depreciation rate
rho   = 0.95;       // TFP shock persistence
chi   = 2.24;       // Labor disutility parameter
model;
// (10) Euler equation
1/C = beta * (1/C(+1)) * (R(+1) + 1 - delta);
// (11) Labor-leisure trade-off
(1/C) * W = chi / (1 - H);
// (12) Resource constraint
C + I = Y;
// (13) Return on capital
R = alpha * Y / K;
// (14) Wage equation
W = (1 - alpha) * Y / H;
// (15) Capital accumulation
I = K - (1 - delta) * K(-1);
// (16) Cobb-Douglas production
Y = A * K^alpha * H^(1 - alpha);
// (17) Log TFP process
log(A) = rho * log(A(-1)) + eps;
end;
initval;
A = 1;
K = ((alpha * beta / (1 - beta * (1 - delta)))^(1/(1 - alpha)));
H = 0.33;
Y = A * K^alpha * H^(1 - alpha);
I = delta * K;
C = Y - I;
R = alpha * Y / K;
W = (1 - alpha) * Y / H;
end;
steady;
check;
resid;
shocks;
var eps = 0.01^2; // 1% standard deviation TFP shock
end;
stoch_simul(order=1, irf=40, hp_filter=1600, loglinear) Y C I K H W A R;'
# 1. Write the .mod file into the code/ folder
write_mod(
code  = dynareCodes,
model = "code/rbc_model"
)
# 2. Run Dynare and import the log
rbc_results <- run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
view(run_dynare())
include_IRF(
model = "rbc_model",
path  = "code/rbc_model/rbc_model/graphs",
IRF   = "Y"
)
include_IRF(
model = "rbc_model",
path  = "code/rbc_model/graphs",
IRF   = "C"
)
# Y‐shock IRF
include_IRF(
model = "rbc_model",
path  = "code/rbc_model/rbc_model/graphs",
IRF   = "Y"
)
getwd()
dynareCodes='%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RBC model with Labor and Log Utility
% Based on image equations (10)–(17)
% Corrected for B&K conditions (loglinear TFP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
var C               // Consumption
I               // Investment
Y               // Output
K               // Capital stock
R               // Return on Capital
W               // Wage
H               // Hours worked
A;              // Productivity level
varexo eps;         // TFP shock
parameters beta alpha delta rho chi;
beta  = 0.99;       // Discount factor
alpha = 0.33;       // Capital share
delta = 0.025;      // Depreciation rate
rho   = 0.95;       // TFP shock persistence
chi   = 2.24;       // Labor disutility parameter
model;
// (10) Euler equation
1/C = beta * (1/C(+1)) * (R(+1) + 1 - delta);
// (11) Labor-leisure trade-off
(1/C) * W = chi / (1 - H);
// (12) Resource constraint
C + I = Y;
// (13) Return on capital
R = alpha * Y / K;
// (14) Wage equation
W = (1 - alpha) * Y / H;
// (15) Capital accumulation
I = K - (1 - delta) * K(-1);
// (16) Cobb-Douglas production
Y = A * K^alpha * H^(1 - alpha);
// (17) Log TFP process
log(A) = rho * log(A(-1)) + eps;
end;
initval;
A = 1;
K = ((alpha * beta / (1 - beta * (1 - delta)))^(1/(1 - alpha)));
H = 0.33;
Y = A * K^alpha * H^(1 - alpha);
I = delta * K;
C = Y - I;
R = alpha * Y / K;
W = (1 - alpha) * Y / H;
end;
steady;
check;
resid;
shocks;
var eps = 0.01^2; // 1% standard deviation TFP shock
end;
stoch_simul(order=1, irf=40, hp_filter=1600, loglinear,graph_format=(pdf)) Y C I K H W A R;'
# 1. Write the .mod file into the code/ folder
write_mod(
code  = dynareCodes,
model = "code/rbc_model"
)
# 2. Run Dynare and import the log
rbc_results <- run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
# 1. Write the .mod file into the code/ folder
write_mod(
code  = dynareCodes,
model = "code/rbc_model"
)
# 2. Run Dynare and import the log
rbc_results <- run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
# Y‐shock IRF
include_IRF(
model = "rbc_model",
path  = "code/rbc_model/rbc_model/graphs",
IRF   = "Y"
)
include_IRF(
model = "code/rbc_model",  # Path to the model directory
IRF   = "eps_Y"            # Shock and variable combined
)
include_IRF(
path = "code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps_Y.pdf"
)
include_IRF(
model = "code/rbc_model",  # Path to the model directory
IRF   = "eps_Y"            # Shock and variable combined
)
include_IRF(
model = "code/rbc_model",  # Path to the model directory
IRF   = "eps_Y"            # Shock and variable combined
)
include_IRF(
path = "code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps_Y.pdf"
)
# 1. Write the .mod file
write_mod(
code  = dynareCodes,
model = "code/rbc_model"
)
# 2. Run Dynare
run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
# 3. Include the IRF graph
include_IRF(
model = "code/rbc_model",  # Correct model path
IRF   = "eps_Y"            # Correct IRF name
)
# 3. Include the IRF graph
include_IRF(
model = "code/rbc_model",  # Correct model path
IRF   = "eps_Y"            # Correct IRF name
)
getwd()
include_IRF(
path = "code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps.pdf"
)
include_IRF(
path = "code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps.pdf"
)
dynareCodes='%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RBC model with Labor and Log Utility
% Based on image equations (10)–(17)
% Corrected for B&K conditions (loglinear TFP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
var C               // Consumption
I               // Investment
Y               // Output
K               // Capital stock
R               // Return on Capital
W               // Wage
H               // Hours worked
A;              // Productivity level
varexo eps;         // TFP shock
parameters beta alpha delta rho chi;
beta  = 0.99;       // Discount factor
alpha = 0.33;       // Capital share
delta = 0.025;      // Depreciation rate
rho   = 0.95;       // TFP shock persistence
chi   = 2.24;       // Labor disutility parameter
model;
// (10) Euler equation
1/C = beta * (1/C(+1)) * (R(+1) + 1 - delta);
// (11) Labor-leisure trade-off
(1/C) * W = chi / (1 - H);
// (12) Resource constraint
C + I = Y;
// (13) Return on capital
R = alpha * Y / K;
// (14) Wage equation
W = (1 - alpha) * Y / H;
// (15) Capital accumulation
I = K - (1 - delta) * K(-1);
// (16) Cobb-Douglas production
Y = A * K^alpha * H^(1 - alpha);
// (17) Log TFP process
log(A) = rho * log(A(-1)) + eps;
end;
initval;
A = 1;
K = ((alpha * beta / (1 - beta * (1 - delta)))^(1/(1 - alpha)));
H = 0.33;
Y = A * K^alpha * H^(1 - alpha);
I = delta * K;
C = Y - I;
R = alpha * Y / K;
W = (1 - alpha) * Y / H;
end;
steady;
check;
resid;
shocks;
var eps = 0.01^2; // 1% standard deviation TFP shock
end;
stoch_simul(order=1, irf=40, hp_filter=1600, loglinear,graph_format=(pdf),font_name='Arial') Y C I K H W A R;'
dynareCodes='%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RBC model with Labor and Log Utility
% Based on image equations (10)–(17)
% Corrected for B&K conditions (loglinear TFP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
var C               // Consumption
I               // Investment
Y               // Output
K               // Capital stock
R               // Return on Capital
W               // Wage
H               // Hours worked
A;              // Productivity level
varexo eps;         // TFP shock
parameters beta alpha delta rho chi;
beta  = 0.99;       // Discount factor
alpha = 0.33;       // Capital share
delta = 0.025;      // Depreciation rate
rho   = 0.95;       // TFP shock persistence
chi   = 2.24;       // Labor disutility parameter
model;
// (10) Euler equation
1/C = beta * (1/C(+1)) * (R(+1) + 1 - delta);
// (11) Labor-leisure trade-off
(1/C) * W = chi / (1 - H);
// (12) Resource constraint
C + I = Y;
// (13) Return on capital
R = alpha * Y / K;
// (14) Wage equation
W = (1 - alpha) * Y / H;
// (15) Capital accumulation
I = K - (1 - delta) * K(-1);
// (16) Cobb-Douglas production
Y = A * K^alpha * H^(1 - alpha);
// (17) Log TFP process
log(A) = rho * log(A(-1)) + eps;
end;
initval;
A = 1;
K = ((alpha * beta / (1 - beta * (1 - delta)))^(1/(1 - alpha)));
H = 0.33;
Y = A * K^alpha * H^(1 - alpha);
I = delta * K;
C = Y - I;
R = alpha * Y / K;
W = (1 - alpha) * Y / H;
end;
steady;
check;
resid;
shocks;
var eps = 0.01^2; // 1% standard deviation TFP shock
end;
stoch_simul(order=1, irf=40, hp_filter=1600, loglinear,graph_format=(pdf)) Y C I K H W A R;'
# 1. Write the .mod file into the code/ folder
write_mod(
code  = dynareCodes,
model = "code/rbc_model"
)
# 2. Run Dynare and import the log
rbc_results <- run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
include_IRF(
path = "code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps.pdf"
)
dynareCodes='%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RBC model with Labor and Log Utility
% Based on image equations (10)–(17)
% Corrected for B&K conditions (loglinear TFP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
var C               // Consumption
I               // Investment
Y               // Output
K               // Capital stock
R               // Return on Capital
W               // Wage
H               // Hours worked
A;              // Productivity level
varexo eps;         // TFP shock
parameters beta alpha delta rho chi;
beta  = 0.99;       // Discount factor
alpha = 0.33;       // Capital share
delta = 0.025;      // Depreciation rate
rho   = 0.95;       // TFP shock persistence
chi   = 2.24;       // Labor disutility parameter
model;
// (10) Euler equation
1/C = beta * (1/C(+1)) * (R(+1) + 1 - delta);
// (11) Labor-leisure trade-off
(1/C) * W = chi / (1 - H);
// (12) Resource constraint
C + I = Y;
// (13) Return on capital
R = alpha * Y / K;
// (14) Wage equation
W = (1 - alpha) * Y / H;
// (15) Capital accumulation
I = K - (1 - delta) * K(-1);
// (16) Cobb-Douglas production
Y = A * K^alpha * H^(1 - alpha);
// (17) Log TFP process
log(A) = rho * log(A(-1)) + eps;
end;
initval;
A = 1;
K = ((alpha * beta / (1 - beta * (1 - delta)))^(1/(1 - alpha)));
H = 0.33;
Y = A * K^alpha * H^(1 - alpha);
I = delta * K;
C = Y - I;
R = alpha * Y / K;
W = (1 - alpha) * Y / H;
end;
steady;
check;
resid;
shocks;
var eps = 0.01^2; // 1% standard deviation TFP shock
end;
stoch_simul(order=1, irf=40, hp_filter=1600, loglinear,graph_format=png) Y C I K H W A R;'
# 1. Write the .mod file into the code/ folder
write_mod(
code  = dynareCodes,
model = "code/rbc_model"
)
# 2. Run Dynare and import the log
rbc_results <- run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
dynareCodes='%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RBC model with Labor and Log Utility
% Based on image equations (10)–(17)
% Corrected for B&K conditions (loglinear TFP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
var C               // Consumption
I               // Investment
Y               // Output
K               // Capital stock
R               // Return on Capital
W               // Wage
H               // Hours worked
A;              // Productivity level
varexo eps;         // TFP shock
parameters beta alpha delta rho chi;
beta  = 0.99;       // Discount factor
alpha = 0.33;       // Capital share
delta = 0.025;      // Depreciation rate
rho   = 0.95;       // TFP shock persistence
chi   = 2.24;       // Labor disutility parameter
model;
// (10) Euler equation
1/C = beta * (1/C(+1)) * (R(+1) + 1 - delta);
// (11) Labor-leisure trade-off
(1/C) * W = chi / (1 - H);
// (12) Resource constraint
C + I = Y;
// (13) Return on capital
R = alpha * Y / K;
// (14) Wage equation
W = (1 - alpha) * Y / H;
// (15) Capital accumulation
I = K - (1 - delta) * K(-1);
// (16) Cobb-Douglas production
Y = A * K^alpha * H^(1 - alpha);
// (17) Log TFP process
log(A) = rho * log(A(-1)) + eps;
end;
initval;
A = 1;
K = ((alpha * beta / (1 - beta * (1 - delta)))^(1/(1 - alpha)));
H = 0.33;
Y = A * K^alpha * H^(1 - alpha);
I = delta * K;
C = Y - I;
R = alpha * Y / K;
W = (1 - alpha) * Y / H;
end;
steady;
check;
resid;
shocks;
var eps = 0.01^2; // 1% standard deviation TFP shock
end;
stoch_simul(order=1, irf=40, hp_filter=1600, loglinear,graph_format=fig) Y C I K H W A R;'
# 1. Write the .mod file into the code/ folder
write_mod(
code  = dynareCodes,
model = "code/rbc_model"
)
# 2. Run Dynare and import the log
rbc_results <- run_dynare(
code       = dynareCodes,
model      = "code/rbc_model",
import_log = TRUE
)
include_IRF(
path = "code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps_cropped.png"
)
include_IRF(
path = "code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps_cropped.png"
)
[code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps_cropped.png]
![image](code/rbc_model/rbc_model/graphs/rbc_model_IRF_eps_cropped.png)
